// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}


model User {
  id                   Int      @id @default(autoincrement())
  username             String
  firstname            String
  lastname             String
  password             String
  email                String   @unique
  datecreatedutc       DateTime @default(now())
  dateupdatedutc       DateTime @updatedAt
  lastaction           String?
  phonenumber          String
  isverified           Boolean?  @default(false)
  isemailverified      Boolean?  @default(false)
  isPhonenumberVerified Boolean?  @default(false)
  plans                UserPlan[]
  userplansettings    UserPlanSettings[]
  dateOfBirth         DateTime?
  gender              String?
  inviteid            String?
  referalnumbers      Int?
  language            String?
  timeZone            String?

  @@map("Users")
}

model UserPlan {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  day          String   @db.VarChar(10)
  mealPlan     String   @db.VarChar(1000)
  fitnessPlan  String   @db.NVarChar(500)
  isDone       Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  planCorrelationId String?
  isActive    Boolean   @default(true)

  @@map("UserPlans")
}

model UserSubscription{
  id            Int @id @default(autoincrement())
  userId       Int
  isActive    Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt DateTime?
  subscriptionType Int
  lastAction String?
  nextBillingDate DateTime
  paymentStage String?
  paymentReference String?
  @@map("UserSubscriptions")
}

model UserPlanSettings{
  id    Int @id @default(autoincrement())
  typeOfWork String?
  occupation String?
  dailyRoutine String?
  weightGoal String?
  hasMedicationCondition Boolean @default(false)
  medicalCondition String?
  hasDietaryRestriction Boolean @default(false)
  dietaryRestriction String?
  weight Int
  height Int
  enjoyedActivity String?
  daysPerWeek Int
  hoursPerDay Int
  sleepingHours Int
  isActive Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt DateTime?
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  planCorrelationId String
  neededCalPerday Int?
}

model AppSubscription{
  id   Int @id @default(autoincrement()) 
  amount Float 
  code  String
  name String
  @@map("AppSubscriptions")
} 

model WebhookLog{
  id   Int @id @default(autoincrement()) 
  payload String?
  event String?
  createdAt DateTime @default(now())
  @@map("WebhookLogs")
}

model OtpModel {
  id               Int      @id @default(autoincrement())  // Auto-incremented ID
  otp              String   // The OTP value (hashed)
  identifier       String   // The identifier for the OTP (e.g., user identifier or session)
  isUsed           Boolean  @default(false) // Whether the OTP has been used
  dateCreatedUtc   String   // The UTC timestamp when the OTP was created (String type to store UTC string)
  otpHeader        String   // A unique header or identifier (e.g., UUID)
  dateToExpireUtc  String   // The expiration date for the OTP (String type to store UTC string)
  otpType          String   // The type of OTP (e.g., SMS, email, etc.)
  
  @@map("Otps") // Maps this model to a table named 'OtpModels' in your database
}


model LoginHistory{
  id   Int @id @default(autoincrement()) 
  userEmail String?
  loginAction String?
  dateCreatedUtc DateTime @default(now())
  @@map("LoginHistory")
}